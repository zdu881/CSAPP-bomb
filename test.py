class Node:
    def __init__(self, address, value):
        self.address = address
        self.value = value
        self.left = None
        self.right = None

# 示例内存转储数据
memory_dump = {
    0x6030f0: (0x24, 0x6033110, 0x6033130),  # 36
    0x603110: (0x08, 0x6033190, 0x0), # 8
    0x603190: (0x32, 0x6033170, 0x60331b0), # 50
    0x603170: (0x2d, 0x6031d0, 0x603290),  # 示例数据，请根据实际情况补充
    0x6031b0: (0x0, 0x0, 0x0),  # 示例数据，请根据实际情况补充
    0x603200: (0x0, 0x0, 0x0),
    0x603210: (0x63, 0x0, 0x0), # 99
    0x603220: (0x0, 0x0, 0x0),
    0x603230: (0x23, 0x0, 0x0), # 35 
    0x603240: (0x0, 0x0, 0x0),
    0x603250: (0x07, 0x0, 0x0), # 7
    0x603260: (0x0, 0x0, 0x0),
    0x603270: (0x14, 0x0, 0x0), # 20 √
    0x603280: (0x0, 0x0, 0x0),
    0x603290: (0x2F, 0x0, 0x0),
    0x6032a0: (0x0, 0x0, 0x0),
    0x6032b0: (0x3E9, 0x0, 0x0),
    0x6032c0: (0x0, 0x0, 0x0),
    0x6032d0: (0x1000014C, 0x6032e0, 0x0),
    0x6032e0: (0x200000A8, 0x6032f0, 0x0),
    0x6032f0: (0x0, 0x0, 0x0),
    # 根据实际内存转储数据继续添加节点
}

def build_tree(address, memory_dump):
    if address == 0x0 or address not in memory_dump:
        return None
    value, left_addr, right_addr = memory_dump[address]
    node = Node(address, value)
    node.left = build_tree(left_addr, memory_dump)
    node.right = build_tree(right_addr, memory_dump)
    return node

def print_tree(node, level=0):
    if node is not None:
        print('  ' * level + f'Node @ {hex(node.address)}: {node.value}')
        print_tree(node.left, level + 1)
        print_tree(node.right, level + 1)

root = build_tree(0x6030f0, memory_dump)
print_tree(root)